gICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZW5kCiAgICAgICAgIGVuZAogICAgZW5kCgogICAgcmV0dXJuIEJlc3RQb3MsIEJlc3RIaXQKCmVuZAoKZnVuY3Rpb24gR2V0UHJlZGljdGVkUG9zaXRpb25zVGFibGUoVlAsIHQsIGRlbGF5LCB3aWR0aCwgcmFuZ2UsIHNwZWVkLCBzb3VyY2UsIGNvbGxpc2lvbikKCiAgICBsb2NhbCByZXN1bHQgPSB7fQogICAgZm9yIGksIHRhcmdldCBpbiBpcGFpcnModCkgZG8KICAgICAgICBsb2NhbCBDYXN0UG9zaXRpb24sIEhpdGNoYW5jZSwgUG9zaXRpb24gPSBWUDpHZXRDaXJjdWxhckNhc3RQb3NpdGlvbih0YXJnZXQsIGRlbGF5LCB3aWR0aCwgcmFuZ2UsIHNwZWVkLCBzb3VyY2UsIGNvbGxpc2lvbikgCiAgICAgICAgdGFibGUuaW5zZXJ0KHJlc3VsdCwgUG9zaXRpb24pCiAgICBlbmQKICAgIHJldHVybiByZXN1bHQKCmVuZAoKZnVuY3Rpb24gTWVyZ2VUYWJsZXModDEsIHQyKQoKICAgIGZvciBpID0gMSwgI3QyIGRvCiAgICAgICAgdDFbI3QxICsgMV0gPSB0MltpXQogICAgZW5kCiAgICByZXR1cm4gdDEKCmVuZAoKZnVuY3Rpb24gU2VsZWN0VW5pdHModW5pdHMsIGNvbmRpdGlvbikKICAgIAogICAgbG9jYWwgcmVzdWx0ID0ge30KICAgIGZvciBpLCB1bml0IGluIGlwYWlycyh1bml0cykgZG8KICAgICAgICBpZiBjb25kaXRpb24odW5pdCkgdGhlbgogICAgICAgICAgICB0YWJsZS5pbnNlcnQocmVzdWx0LCB1bml0KQogICAgICAgIGVuZAogICAgZW5kCiAgICByZXR1cm4gcmVzdWx0CgplbmQKCmZ