gIHJldHVybiBzZWxmLlZQOkdldExpbmVBT0VDYXN0UG9zaXRpb24odGFyZ2V0LCBzZWxmLmRlbGF5LCBzZWxmLnJhZGl1cywgc2VsZi5yYW5nZSwgc2VsZi5zcGVlZCwgc2VsZi5zb3VyY2VQb3NpdGlvbikKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5WUDpHZXRMaW5lQ2FzdFBvc2l0aW9uKHRhcmdldCwgc2VsZi5kZWxheSwgc2VsZi53aWR0aCwgc2VsZi5yYW5nZSwgc2VsZi5zcGVlZCwgc2VsZi5zb3VyY2VQb3NpdGlvbiwgc2VsZi5jb2xsaXNpb24pCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZWxzZWlmIHNlbGYuc2tpbGxzaG90VHlwZSA9PSBTS0lMTFNIT1RfQ0lSQ1VMQVIgdGhlbgogICAgICAgICAgICAgICAgaWYgc2VsZi51c2VBb2UgdGhlbgogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLlZQOkdldENpcmN1bGFyQU9FQ2FzdFBvc2l0aW9uKHRhcmdldCwgc2VsZi5kZWxheSwgc2VsZi5yYWRpdXMsIHNlbGYucmFuZ2UsIHNlbGYuc3BlZWQsIHNlbGYuc291cmNlUG9zaXRpb24pCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuVlA6R2V0Q2lyY3VsYXJDYXN0UG9zaXRpb24odGFyZ2V0LCBzZWxmLmRlbGF5LCBzZWxmLndpZHRoLCBzZWxmLnJhbmdlLCBzZWxmLnNwZWVkLCBzZWxmLnNvdXJjZVBvc2l0aW9uLCBzZWxmLmNvbGxpc2lvbikKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgZWxzZWlmIHNlbGYuc2t