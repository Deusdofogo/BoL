vcnRDb25kaXRpb24oKSA9PSBmYWxzZSBhbmQgc2VsZi5fX2NoYXJnZWRfYWN0aXZlCmVuZAoKLS1bWwogICAgQ2hhcmdlcyB0aGUgc3BlbGwKXV0KZnVuY3Rpb24gU3BlbGw6Q2hhcmdlKCkKCiAgICBhc3NlcnQoc2VsZi5fX2NoYXJnZWQsICJTcGVsbDpDaGFyZ2UoKTogU3BlbGwgaXMgbm90IGRlZmluZWQgYXMgY2hhcmdlYWJsZSBzcGVsbCEiKQoKICAgIGlmIG5vdCBzZWxmOklzQ2hhcmdpbmcoKSB0aGVuCiAgICAgICAgQ2FzdFNwZWxsKHNlbGYuc3BlbGxJZCwgbW91c2VQb3MueCwgbW91c2VQb3MueikKICAgIGVuZAoKZW5kCgotLSBJbnRlcm5hbCBmdW5jdGlvbiwgZG8gbm90IHVzZSEKZnVuY3Rpb24gU3BlbGw6X0Fib3J0Q2hhcmdlKCkKICAgIGlmIHNlbGYuX19jaGFyZ2VkIGFuZCBzZWxmLl9fY2hhcmdlZF9hY3RpdmUgdGhlbgogICAgICAgIHNlbGYuX19jaGFyZ2VkX2Fib3J0ZWQgPSB0cnVlCiAgICAgICAgc2VsZi5fX2NoYXJnZWRfYWN0aXZlICA9IGZhbHNlCiAgICAgICAgc2VsZjpTZXRSYW5nZShzZWxmLl9fY2hhcmdlZF9pbml0aWFsUmFuZ2UpCiAgICBlbmQKZW5kCgotLVtbCiAgICBTZXQgdGhlIGhpdENoYW5jZSBvZiB0aGUgcHJlZGljdGVkIHRhcmdldCBwb3NpdGlvbiB3aGVuIHRvIGNhc3QKCiAgICBAcGFyYW0gaGl0Q2hhbmNlIHwgaW50ICAgfCBOZXcgaGl0Q2hhbmNlIGZvciBwcmVkaWN0ZWQgcG9zaXRpb25zCiAgICBAcmVydXJuICAgICAgICAgIHwgY2xhc3MgfCBUaGUgY3VycmVudCBpbnN0YW5jZQpdXQpmdW5jdGlvbiB