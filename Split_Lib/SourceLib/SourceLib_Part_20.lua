jZQogICAgc2VsZi5zb3VyY2VSYW5nZSAgICA9IHNvdXJjZQoKICAgIHJldHVybiBzZWxmCgplbmQKCi0tW1sKICAgIFVwZGF0ZSB0aGUgc291cmNlIHBvc290aW9uIGZyb20gd2hlcmUgdGhlIHNwZWxsIHdpbGwgYmUgc2hvdAoKICAgIEBwYXJhbSBzb3VyY2UgfCBDdW5pdCB8IFNvdXJjZSBwb3NpdGlvbiBmcm9tIHdoZXJlIHRoZSBzcGVsbCB3aWxsIGJlIHNob3QsIHBsYXllciBieSBkZWZhdWx0CiAgICBAIHJldHVybiAgICAgIHwgY2xhc3MgfCBUaGUgY3VycmVudCBpbnN0YW5jZQpdXQpmdW5jdGlvbiBTcGVsbDpTZXRTb3VyY2VQb3NpdGlvbihzb3VyY2UpCgogICAgYXNzZXJ0KHNvdXJjZSwgIlNwZWxsOiBzb3VyY2UgY2FuJ3QgYmUgbmlsISIpCgogICAgc2VsZi5zb3VyY2VQb3NpdGlvbiA9IHNvdXJjZQoKICAgIHJldHVybiBzZWxmCgplbmQKCi0tW1sKICAgIFVwZGF0ZSB0aGUgc291cmNlIHVuaXQgZnJvbSB3aGVyZSB0aGUgcmFuZ2Ugd2lsbCBiZSBjYWxjdWxhdGVkCgogICAgQHBhcmFtIHNvdXJjZSB8IEN1bml0IHwgU291cmNlIG9iamVjdCB1bml0IGZyb20gd2hlcmUgdGhlIHJhbmdlIHNob3VsZCBiZSBjYWxjdWxlZAogICAgQHJldHVybiAgICAgICB8IGNsYXNzIHwgVGhlIGN1cnJlbnQgaW5zdGFuY2UKXV0KZnVuY3Rpb24gU3BlbGw6U2V0U291cmNlUmFuZ2Uoc291cmNlKQoKICAgIGFzc2VydChzb3VyY2UsICJTcGVsbDogc291cmNlIGNhbid0IGJlIG5pbCEiKQoKICAgIHNlbGYuc291cmNlUmFuZ2UgPSBzb3VyY2UKCiAgICByZXR