lbGxJZCwgZGFtYWdldHlwZSwgYmFzZWRhbWFnZSwgcGVybGV2ZWwsIHNjYWxpbmd0eXBlLCBzY2FsaW5nc3RhdCwgcGVyY2VudHNjYWxpbmcsIGNvbmRpdGlvbiwgZXh0cmEpCiAgICAgICAgRGFtYWdlTGliOkdldFNjYWxpbmdEYW1hZ2UodGFyZ2V0LCBzY2FsaW5ndHlwZSwgc2NhbGluZ3N0YXQsIHBlcmNlbnRzY2FsaW5nKQogICAgICAgIERhbWFnZUxpYjpHZXRUcnVlRGFtYWdlKHRhcmdldCwgc3BlbGwsIGRhbWFnZXR5cGUsIGJhc2VkYW1hZ2UsIHBlcmxldmVsLCBzY2FsaW5ndHlwZSwgc2NhbGluZ3N0YXQsIHBlcmNlbnRzY2FsaW5nLCBjb25kaXRpb24sIGV4dHJhKQogICAgICAgIERhbWFnZUxpYjpDYWxjU3BlbGxEYW1hZ2UodGFyZ2V0LCBzcGVsbCkKICAgICAgICBEYW1hZ2VMaWI6Q2FsY0NvbWJvRGFtYWdlKHRhcmdldCwgY29tYm8pCiAgICAgICAgRGFtYWdlTGliOklzS2lsbGFibGUodGFyZ2V0LCBjb21ibykKICAgICAgICBEYW1hZ2VMaWI6QWRkVG9NZW51KG1lbnUsIGNvbWJvKQoKICAgIC1BdmFpbGFibGUgc3BlbGxzIGJ5IGRlZmF1bHQgKG5vdCBhZGRlZCB5ZXQpOgogICAgICAgIF9BQTogUmV0dXJucyB0aGUgYXV0by1hdHRhY2sgZGFtYWdlLgogICAgICAgIF9JR05JVEU6IFJldHVybnMgdGhlIGlnbml0ZSBkYW1hZ2UuCiAgICAgICAgX0lURU1TOiBSZXR1cm5zIHRoZSBkYW1hZ2UgZGVhbHQgYnkgYWxsIHRoZSBpdGVtcyBhY3RpdmVzLgoKICAgIC1EYW1hZ2UgdHlwZXM6CiAgICAgICAgX01BR0lDCiAgICAgICAgX1BIWVNJQ0F