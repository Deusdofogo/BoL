function Base64Decrypt(data)
	local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

function _GetLocalVersion(LibName, StartPos, EndPos)
	if LibName == "SHADOWVAYNE" then
		LibNameFile = io.open(SCRIPT_PATH.."/"..MainScriptName, "r")
		LibNameString = LibNameFile:read("*a")
		LibNameFile:close()
		return tonumber(string.sub(LibNameString, 51, 54))
	else
		LibNameFile = io.open(LIB_PATH.."/"..LibName..".lua", "r")
		LibNameString = LibNameFile:read("*a")
		LibNamePos, Dummy = string.find(LibNameString, "local version =")
		if LibNamePos == nil then LibNamePos, Dummy = string.find(LibNameString, "@version") end
		LibNameFile:close()
		return tonumber(string.sub(LibNameString, LibNamePos+StartPos, LibNamePos+EndPos))
	end
end


StoredSOW = ""
StoredVPred = ""
StoredSourceLib = ""

function _ReplaceAutoUpdate(LibName)
	AutoUpdateOverWriteFile = io.open(LIB_PATH.."/"..LibName..".lua", "r")
	AutoUpdateOverWriteString = AutoUpdateOverWriteFile:read("*a")
	AutoUpdateOverWriteFile:close()
	AutoUpdateOverWriteString = string.gsub(AutoUpdateOverWriteString, "local AUTOUPDATE = true", "local AUTOUPDATE = false")
	AutoUpdateOverWriteString = string.gsub(AutoUpdateOverWriteString, "local autoUpdate   = true", "local autoUpdate   = false")
	AutoUpdateOverWriteFile = io.open(LIB_PATH.."/"..LibName..".lua", "w+")
	AutoUpdateOverWriteFile:write(AutoUpdateOverWriteString)
	AutoUpdateOverWriteFile:close()
end


	if FileExist(LIB_PATH.."/SOW.lua") and _GetLocalVersion("SOW", 17, 21) < 1.129 then os.remove(LIB_PATH.."/SOW.lua")	end
	if FileExist(LIB_PATH.."/VPREDICTION.lua") and _GetLocalVersion("VPREDICTION", 17, 20) < 2.51 then os.remove(LIB_PATH.."/VPREDICTION.lua")	end
	if FileExist(LIB_PATH.."/SOURCELIB.lua") and _GetLocalVersion("SOURCELIB", 16, 20) < 1.058 then os.remove(LIB_PATH.."/SOURCELIB.lua")	end

	if not FileExist(LIB_PATH.."/SOW.lua") then
		AutoUpdateOverWriteString = Base64Decrypt(StoredSOW)
		AutoUpdateOverWriteFile = io.open(LIB_PATH.."/SOW.lua", "w+")
		AutoUpdateOverWriteFile:write(AutoUpdateOverWriteString)
		AutoUpdateOverWriteFile:close()
	else
		_ReplaceAutoUpdate("SOW")
	end

	if not FileExist(LIB_PATH.."/VPrediction.lua") then
		AutoUpdateOverWriteString = Base64Decrypt(StoredVPred)
		AutoUpdateOverWriteFile = io.open(LIB_PATH.."/VPrediction.lua", "w+")
		AutoUpdateOverWriteFile:write(AutoUpdateOverWriteString)
		AutoUpdateOverWriteFile:close()
	else
		_ReplaceAutoUpdate("VPrediction")
	end

	if not FileExist(LIB_PATH.."/SourceLib.lua") then
		AutoUpdateOverWriteString = Base64Decrypt(StoredSourceLib)
		AutoUpdateOverWriteFile = io.open(LIB_PATH.."/SourceLib.lua", "w+")
		AutoUpdateOverWriteFile:write(AutoUpdateOverWriteString)
		AutoUpdateOverWriteFile:close()
	else
		_ReplaceAutoUpdate("SourceLib")
	end
